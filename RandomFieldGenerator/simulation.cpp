#include "simulation.h"

void FEM::Simulation::constructLocalStiffnessMatrix(
        const float step,
        const unsigned *A,
        const unsigned *B,
        const unsigned *C,
        const unsigned *D,
        const float conduction,
        float K[4][4]
        ) noexcept
{
    // Calculate [C] = [1 Ax Ay Az]
    //                 [1 Bx By Bz]
    //                 [1 Cx Cy Cz]
    //                 [1 Dx Dy Dz]

    K[0][0] = 1.0f;
    K[0][1] = step * A[0];
    K[0][2] = step * A[1];
    K[0][3] = step * A[2];

    K[1][0] = 1.0f;
    K[1][1] = step * B[0];
    K[1][2] = step * B[1];
    K[1][3] = step * B[2];

    K[2][0] = 1.0f;
    K[2][1] = step * C[0];
    K[2][2] = step * C[1];
    K[2][3] = step * C[2];

    K[3][0] = 1.0f;
    K[3][1] = step * D[0];
    K[3][2] = step * D[1];
    K[3][3] = step * D[2];

    // Calculate determinant of [C]
    float _det = (K[1][1]*K[2][2]*K[3][3]
            - K[1][1]*K[2][3]*K[3][2]
            - K[2][1]*K[1][2]*K[3][3]
            + K[2][1]*K[1][3]*K[3][2]
            + K[3][1]*K[1][2]*K[2][3]
            - K[3][1]*K[1][3]*K[2][2])

            -(K[0][1]*K[2][2]*K[3][3]
            - K[0][1]*K[2][3]*K[3][2]
            - K[2][1]*K[0][2]*K[3][3]
            + K[2][1]*K[0][3]*K[3][2]
            + K[3][1]*K[0][2]*K[2][3]
            - K[3][1]*K[0][3]*K[2][2])

            +(K[0][1]*K[1][2]*K[3][3]
            - K[0][1]*K[1][3]*K[3][2]
            - K[1][1]*K[0][2]*K[3][3]
            + K[1][1]*K[0][3]*K[3][2]
            + K[3][1]*K[0][2]*K[1][3]
            - K[3][1]*K[0][3]*K[1][2])

            -(K[0][1]*K[1][2]*K[2][3]
            - K[0][1]*K[1][3]*K[2][2]
            - K[1][1]*K[0][2]*K[2][3]
            + K[1][1]*K[0][3]*K[2][2]
            + K[2][1]*K[0][2]*K[1][3]
            - K[2][1]*K[0][3]*K[1][2]);

    // Calculate [B] = [C]^-1 \(1-st row)
    float _B[3][4];
    _B[0][0] =-(K[2][2]*K[3][3] - K[2][3]*K[3][2] - K[1][2]*K[3][3] + K[1][3]*K[3][2] + K[1][2]*K[2][3] - K[1][3]*K[2][2]) / _det;
    _B[0][1] = (K[2][2]*K[3][3] - K[2][3]*K[3][2] - K[0][2]*K[3][3] + K[0][3]*K[3][2] + K[0][2]*K[2][3] - K[0][3]*K[2][2]) / _det;
    _B[0][2] =-(K[1][2]*K[3][3] - K[1][3]*K[3][2] - K[0][2]*K[3][3] + K[0][3]*K[3][2] + K[0][2]*K[1][3] - K[0][3]*K[1][2]) / _det;
    _B[0][3] = (K[1][2]*K[2][3] - K[1][3]*K[2][2] - K[0][2]*K[2][3] + K[0][3]*K[2][2] + K[0][2]*K[1][3] - K[0][3]*K[1][2]) / _det;

    _B[1][0] = (K[2][1]*K[3][3] - K[2][3]*K[3][1] - K[1][1]*K[3][3] + K[1][3]*K[3][1] + K[1][1]*K[2][3] - K[1][3]*K[2][1]) / _det;
    _B[1][1] =-(K[2][1]*K[3][3] - K[2][3]*K[3][1] - K[0][1]*K[3][3] + K[0][3]*K[3][1] + K[0][1]*K[2][3] - K[0][3]*K[2][1]) / _det;
    _B[1][2] = (K[1][1]*K[3][3] - K[1][3]*K[3][1] - K[0][1]*K[3][3] + K[0][3]*K[3][1] + K[0][1]*K[1][3] - K[0][3]*K[1][1]) / _det;
    _B[1][3] =-(K[1][1]*K[2][3] - K[1][3]*K[2][1] - K[0][1]*K[2][3] + K[0][3]*K[2][1] + K[0][1]*K[1][3] - K[0][3]*K[1][1]) / _det;

    _B[2][0] =-(K[2][1]*K[3][2] - K[2][2]*K[3][1] - K[1][1]*K[3][2] + K[1][2]*K[3][1] + K[1][1]*K[2][2] - K[1][2]*K[2][1]) / _det;
    _B[2][1] = (K[2][1]*K[3][2] - K[2][2]*K[3][1] - K[0][1]*K[3][2] + K[0][2]*K[3][1] + K[0][1]*K[2][2] - K[0][2]*K[2][1]) / _det;
    _B[2][2] =-(K[1][1]*K[3][2] - K[1][2]*K[3][1] - K[0][1]*K[3][2] + K[0][2]*K[3][1] + K[0][1]*K[1][2] - K[0][2]*K[1][1]) / _det;
    _B[2][3] = (K[1][1]*K[2][2] - K[1][2]*K[2][1] - K[0][1]*K[2][2] + K[0][2]*K[2][1] + K[0][1]*K[1][2] - K[0][2]*K[1][1]) / _det;

    // Calculate element`s volume
    _det /= 6.0f;

    // Calculate local stiffness matrix
    // [C] = [K] = 1/V * [B]^T * [conduction] * [B]
    K[0][0] = conduction / _det * (_B[0][0]*_B[0][0] + _B[1][0]*_B[1][0] + _B[2][0]*_B[2][0]);
    K[0][1] = conduction / _det * (_B[0][0]*_B[0][1] + _B[1][0]*_B[1][1] + _B[2][0]*_B[2][1]);
    K[0][2] = conduction / _det * (_B[0][0]*_B[0][2] + _B[1][0]*_B[1][2] + _B[2][0]*_B[2][2]);
    K[0][3] = conduction / _det * (_B[0][0]*_B[0][3] + _B[1][0]*_B[1][3] + _B[2][0]*_B[2][3]);

    K[1][1] = conduction / _det * (_B[0][1]*_B[0][1] + _B[1][1]*_B[1][1] + _B[2][1]*_B[2][1]);
    K[1][2] = conduction / _det * (_B[0][1]*_B[0][2] + _B[1][1]*_B[1][2] + _B[2][1]*_B[2][2]);
    K[1][3] = conduction / _det * (_B[0][1]*_B[0][3] + _B[1][1]*_B[1][3] + _B[2][1]*_B[2][3]);

    K[2][2] = conduction / _det * (_B[0][2]*_B[0][2] + _B[1][2]*_B[1][2] + _B[2][2]*_B[2][2]);
    K[2][3] = conduction / _det * (_B[0][2]*_B[0][3] + _B[1][2]*_B[1][3] + _B[2][2]*_B[2][3]);

    K[3][3] = conduction / _det * (_B[0][3]*_B[0][3] + _B[1][3]*_B[1][3] + _B[2][3]*_B[2][3]);

    K[1][0] = K[0][1];
    K[2][0] = K[0][2];
    K[3][0] = K[0][3];

    K[2][1] = K[1][2];
    K[3][1] = K[1][3];

    K[3][2] = K[2][3];
}

void FEM::Simulation::applyLocalDirichletConditions(
        char mask,
        const float T0,
        float K[4][4],
        float f[4]) noexcept
{
    for(int i=0; i<4; ++i)
    {
        if(mask & 0b1)
        {
            // push(K[i][i])
            float _Kii = K[i][i];

            // f -= T0 * K.col(i)
            f[0] -= T0 * K[0][i];
            f[1] -= T0 * K[1][i];
            f[2] -= T0 * K[2][i];
            f[3] -= T0 * K[3][i];

            // K.row(i) = 0
            K[i][0] = 0.0f;
            K[i][1] = 0.0f;
            K[i][2] = 0.0f;
            K[i][3] = 0.0f;

            // K.col(i) = 0
            K[0][i] = 0.0f;
            K[1][i] = 0.0f;
            K[2][i] = 0.0f;
            K[3][i] = 0.0f;

            // pop(K[i][i])
            K[i][i] = _Kii;

            // f[i] = K[i][i] * T0
            f[i] = K[i][i] * T0;
        }
        mask >>= 1;
    }
}

void FEM::Simulation::applyLocalNeumannConditions(
        const char mask,
        const float q,
        float f[4]) noexcept
{
    if(mask == 0b00000111)         // A, B, C
    {
        f[0] += q;
        f[1] += q;
        f[2] += q;
    }
    else if(mask == 0b00001011)    // A, B, D
    {
        f[0] += q;
        f[1] += q;
        f[3] += q;
    }
    else if(mask == 0b00001101)    // A, C, D
    {
        f[0] += q;
        f[2] += q;
        f[3] += q;
    }
    else                            // B, C, D
    {
        f[1] += q;
        f[2] += q;
        f[3] += q;
    }
}
